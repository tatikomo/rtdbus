/* 
 * Instance of RTAP database description
 *
 * AUTHOR:     GEV
 * START DATE: 17/03/2009
 */

#define int1        signed<1>
#define int2        signed<2>
#define int4        signed<4>
#define int8        signed<8>
#define uint8       unsigned<8>
#define uint4       unsigned<4>
#define uint2       unsigned<2>
#define uint1       unsigned<1>
#define i_objclass  unsigned<1>
#define s_code      char<8>
#define s_label     char<80>
#define s_univname  char<32>
#define s_valabel   char<12>
#define s_shortlabel    char<16>
#define s_attnamei      char<16>
#define s_statelabel    char<32>

declare database  rtap_db;

/* Linkage table between 'OBJCLASS' and 'CODE' */
class Link_OBJCLASS_CODE
{
  s_code        objectCode;        /* class name (ex. "TM", "TS", "ATC", "SA",... */
  i_objclass    objectClass;       /* class id */
  hash <objectCode> codeHash[100]; /* get objclass by code */
};

/* Common part of each db points */
struct Header
{
  s_univname    univName;
  i_objclass    objectClass; /* class id */
  s_shortlabel  shortLabel;  /* short human-readable designation */
  s_label       longLabel;   /* full human-readable designation */
  time          modifTime;   /* last modification time */
  uint1         validity;    /* VALID|INVALID|MANUAL|... */
  autoid_t      linkSA;      /* reference to SA object */
};

/* Common part for discrete-state objects */
struct DiscreteInfoType
{
  uint1         state;
  s_statelabel  stateLabel;
};

/* Common part for analog-state objects */
struct AnalogInfoType
{
  uint1         state; /* TODO: check it is useless */
  double        val;
};

/* Analog Information Object */
class AnalogInformation
{
  Header    header;
  AnalogInfoType ai;
  autoid[10000];     /* max to 10000 analog-state-objects */
  hash < header.univName > tiHash[10000];
};

/* Discrete Information Object */
class DiscreteInformation
{
  Header    header;
  DiscreteInfoType ai;
  autoid[10000];    /* max to 10000 discrete-states-objects */
  hash < header.univName > tsHash[10000];
};

/*class SV_Valve {
    autoid_t SV;
    autoid_t Valve;
    tree <SV, Valve> pair;
};
class SV_TM {
    autoid_t SV;
    autoid_t TM;
    tree <SV, TM> pair;
};
class ATC_Valve {
    autoid_t ATC;
    autoid_t Valve;
    tree <ATC, Valve> pair;
};
class ATC_TM {
    autoid_t ATC;
    autoid_t TM;
    tree <ATC, TM> pair;
};
class ATC_SV {
    autoid_t ATC;
    autoid_t SV;
    tree <ATC, SV> pair;
};
class DIPL_SV {
    autoid_t DIPL;
    autoid_t SV;
    tree <DIPL, SV> pair;
};
class DIPL_ATC {
    autoid_t DIPL;
    autoid_t ATC;
    tree <DIPL, ATC> pair;
};
class DIPL_TM {
    autoid_t DIPL;
    autoid_t TM;
    tree <DIPL, TM> pair;
};
class DIPL_Valve {
    autoid_t DIPL;
    autoid_t Valve;
    tree <DIPL, Valve> pair;
};
*/

