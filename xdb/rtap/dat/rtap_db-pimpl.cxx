// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "rtap_db-pimpl.hxx"

namespace rtap_db
{
  // AttrNameType_pimpl
  //

  void AttrNameType_pimpl::
  pre ()
  {
  }

  rtap_db::AttrNameType& AttrNameType_pimpl::
  post_AttrNameType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
    return m_impl;
  }

  // ClassType_pimpl
  //

  void ClassType_pimpl::
  pre ()
  {
  }

  rtap_db::ClassType& ClassType_pimpl::
  post_ClassType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
    return m_impl;
  }

  // AttributeType_pimpl
  //

  void AttributeType_pimpl::
  pre ()
  {
  }

  rtap_db::AttributeType& AttributeType_pimpl::
  post_AttributeType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
    return m_impl;
  }

  // PointKind_pimpl
  //

  void PointKind_pimpl::
  pre ()
  {
  }

  rtap_db::PointKind& PointKind_pimpl::
  post_PointKind ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
    return m_impl;
  }

  // RTDB_STRUCT_pimpl
  //

  void RTDB_STRUCT_pimpl::
  pre ()
  {
  }

  void RTDB_STRUCT_pimpl::
  Class (rtap_db::Class& Class)
  {
    // TODO
    //
  }

  void RTDB_STRUCT_pimpl::
  post_RTDB_STRUCT ()
  {
  }

  // Class_pimpl
  //

  void Class_pimpl::
  pre ()
  {
  }

  void Class_pimpl::
  Code (rtap_db::Code Code)
  {
    // TODO
    //
    m_impl.m_class_code = Code;
  }

  void Class_pimpl::
  Name (rtap_db::ClassType& Name)
  {
    // TODO
    //
    m_impl.m_class_name.assign(Name);
  }

  void Class_pimpl::
  Attr ()
  {
  }

  rtap_db::Class& Class_pimpl::
  post_Class ()
  {
    // TODO
    //
    return m_impl;
  }

  // Code_pimpl
  //

  void Code_pimpl::
  pre ()
  {
  }

  rtap_db::Code Code_pimpl::
  post_Code ()
  {
    long long v (post_integer ());

    // TODO
    //
    return m_impl;
  }

  // Attr_pimpl
  //

  void Attr_pimpl::
  pre ()
  {
  }

  void Attr_pimpl::
  Kind (rtap_db::PointKind& Kind)
  {
    // TODO
    m_impl.m_attrib_string_kind = Kind;
  }

  void Attr_pimpl::
  Accessibility (rtap_db::Accessibility& Accessibility)
  {
    // TODO
    //
    m_impl.m_accessibility = Accessibility;
  }

  void Attr_pimpl::
  DeType (rtap_db::AttributeType& DeType)
  {
    // TODO
    //
    m_impl.m_attrib_type = DeType;
  }

  void Attr_pimpl::
  AttrName (rtap_db::AttrNameType& AttrName)
  {
    // TODO
    //
    m_impl.m_name.assign(AttrName);
  }

  void Attr_pimpl::
  Value (const ::std::string& Value)
  {
    // TODO
    //
    m_impl.m_value.assign(Value);
  }

  void Attr_pimpl::
  post_Attr ()
  {
  }

  // Accessibility_pimpl
  //

  void Accessibility_pimpl::
  pre ()
  {
  }

  rtap_db::Accessibility& Accessibility_pimpl::
  post_Accessibility ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
    return m_impl;
  }
}

