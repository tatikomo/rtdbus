// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef RTAP_DB_PIMPL_HXX
#define RTAP_DB_PIMPL_HXX

#include "rtap_db-pskel.hxx"
#include "rtap_db.hxx"

namespace rtap_db
{
  class AttrNameType_pimpl: public virtual AttrNameType_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual rtap_db::AttrNameType&
    post_AttrNameType ();

    private:
    AttrNameType m_impl;
  };

  class Tag_pimpl: public virtual Tag_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual rtap_db::Tag&
    post_Tag ();

    private:
    Tag m_impl;
  };

  class AttributeType_pimpl: public virtual AttributeType_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual rtap_db::AttributeType&
    post_AttributeType ();

    private:
    AttributeType m_impl;
  };

  class PointKind_pimpl: public virtual PointKind_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual rtap_db::PointKind&
    post_PointKind ();

    private:
    PointKind m_impl;
  };

  class RTDB_STRUCT_pimpl: public virtual RTDB_STRUCT_pskel
  {
    public:
    virtual void
    pre (rtap_db::Points&);
    // Используется в ходе тестирования, без создания списка классов
    // Принимает указатель на имя входящего XML-файла
    virtual void
    pre (const char*);

    virtual void
    Point (rtap_db::Point&);

    virtual rtap_db::Points*
    post_RTDB_STRUCT ();

    private:
    rtap_db::Points* m_classes;
  };

  class Point_pimpl: public virtual Point_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Code (rtap_db::Code);

    virtual void
    Tag (rtap_db::Tag&);

    virtual void
    Attr ();

    virtual rtap_db::Point&
    post_Point ();

    ~Point_pimpl();

    private:
    Point *m_impl;
  };

  class Code_pimpl: public virtual Code_pskel,
    public ::xml_schema::integer_pimpl
  {
    public:
    virtual void
    pre ();

    virtual rtap_db::Code
    post_Code ();

    private:
    Code m_impl;
  };

  class Attr_pimpl: public virtual Attr_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Kind (rtap_db::PointKind&);

    virtual void
    Accessibility (rtap_db::Accessibility&);

    virtual void
    DeType (rtap_db::AttributeType&);

    virtual void
    AttrName (rtap_db::AttrNameType&);

    virtual void
    Value (const ::std::string&);

    virtual void
    post_Attr ();

    private:
    Attrib m_impl;
    Point *m_class;
  };

  class Accessibility_pimpl: public virtual Accessibility_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual rtap_db::Accessibility&
    post_Accessibility ();

    private:
    Accessibility m_impl;
  };
}

#endif // RTAP_DB_PIMPL_HXX
