/* 
 * Instance of RTAP database description
 *
 * AUTHOR:     GEV
 * START DATE: 17/03/2009
 */

#define int1        signed<1>
#define int2        signed<2>
#define int4        signed<4>
#define int8        signed<8>
#define uint8       unsigned<8>
#define uint4       unsigned<4>
#define uint2       unsigned<2>
#define uint1       unsigned<1>
#define i_objclass  unsigned<1>
#define s_code      char<8>
#define s_label     char<80>
#define s_formula   char<40>
#define s_univname  char<32>
#define s_valabel   char<12>
#define s_unity     char<12>
#define s_shortlabel    char<16>
#define s_attnamei      char<16>
#define s_statelabel    char<32>

declare database  rtap_db;

/* Linkage table between 'OBJCLASS' and 'CODE' */
class Link_OBJCLASS_CODE
{
  s_code        objectCode;        /* class name (ex. "TM", "TS", "ATC", "SA",... */
  i_objclass    objectClass;       /* class id */
  hash <objectCode> codeHash[100]; /* get objclass by code */
};

/*
===========================================================
select distinct PHYSICAL_UNIT from ANALOG_INFORMATION; - 36
===========================================================
%
A
MNm3
MNm3/h
MPa
MW
MW/Mm3
MW/h
MWh
MWh/d
Mm3
Mm3/d
Mm3/h
Pa
V
Wu
h
kCal/m3
kPa
kW
kg/m3
kgfcm2
km3
km3/d
km3/h
m3
m3/h
m3/mn
micro-m
mm
mm.col.mer
mm/s
oC
rpm


===========================================================
select distinct code from PHYSICAL_UNIT; - 61
===========================================================
KU%
KUA
KUGc
KUHz
KUKAh
KUKWh
KUMBAP
KUME
KUME/m3
KUMNm3
KUMNm3/h
KUMPa
KUMW
KUMW/Mm3
KUMW/h
KUMWh
KUMWh/d
KUMm3
KUMm3/d
KUMm3/h
KUPa
KUV
KUWu
KUatm
KUh
KUkBap
KUkCal
KUkCal/(kg*oC)
KUkCal/kg*oC
KUkCal/m3
KUkPa
KUkV
KUkW
KUkg/h
KUkg/m3
KUkg/mn
KUkg_o-g
KUkgcm2
KUkgfcm2
KUkgfm2
KUkgm2
KUkm
KUkm3
KUkm3/d
KUkm3/h
KUkm3/mn
KUm
KUm3
KUm3/d
KUm3/h
KUm3/mn
KUmicro-m
KUmm
KUmm.col.mer
KUmm/s
KUmmrs
KUmol
KUoC
KUrpm
KUtut
KUtut/d

*/

/* Linkage table between unity category and Infotype' instances */
class Link_UNITY_ID
{
  s_unity       unityLabel;
  uint2         unityID;
  hash <unityLabel> unityHash[100]; /* max 100 different unities */
  unique tree <unityID> PK_by_id;   /* get unity instance by ID */
};

/* Common part of each db points */
struct Header
{
  s_univname    univName;
  i_objclass    objectClass; /* class id */
  s_shortlabel  shortLabel;  /* short human-readable designation */
  s_label       longLabel;   /* full human-readable designation */
  uint2         unityID;     /* link to unity category */
  time          modifTime;   /* last modification time */
  uint1         validity;    /* VALID|INVALID|MANUAL|... */
  autoid_t      linkSA;      /* reference to SA object */
};

/* Common part for discrete-state objects */
struct DiscreteInfoType
{
  uint1         state;
  s_statelabel  stateLabel;
};

/* Common part for analog-state objects */
struct AnalogInfoType
{
  uint1         state; /* TODO: check it is useless */
  s_formula     ce; /* calculation engine for realtime value correction */
  double        val_origin;
  double        val_calculated;
};

/* Analog Information Object */
class AnalogInformation
{
  Header    header;
  AnalogInfoType ai;
  autoid[10000];     /* max to 10000 analog-state-objects */
  hash < header.univName > tiHash[10000];
};

/* Discrete Information Object */
class DiscreteInformation
{
  Header    header;
  DiscreteInfoType ai;
  autoid[10000];    /* max to 10000 discrete-states-objects */
  hash < header.univName > tsHash[10000];
};

/*class SV_Valve {
    autoid_t SV;
    autoid_t Valve;
    tree <SV, Valve> pair;
};
class SV_TM {
    autoid_t SV;
    autoid_t TM;
    tree <SV, TM> pair;
};
class ATC_Valve {
    autoid_t ATC;
    autoid_t Valve;
    tree <ATC, Valve> pair;
};
class ATC_TM {
    autoid_t ATC;
    autoid_t TM;
    tree <ATC, TM> pair;
};
class ATC_SV {
    autoid_t ATC;
    autoid_t SV;
    tree <ATC, SV> pair;
};
class DIPL_SV {
    autoid_t DIPL;
    autoid_t SV;
    tree <DIPL, SV> pair;
};
class DIPL_ATC {
    autoid_t DIPL;
    autoid_t ATC;
    tree <DIPL, ATC> pair;
};
class DIPL_TM {
    autoid_t DIPL;
    autoid_t TM;
    tree <DIPL, TM> pair;
};
class DIPL_Valve {
    autoid_t DIPL;
    autoid_t Valve;
    tree <DIPL, Valve> pair;
};
*/

