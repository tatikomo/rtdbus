syntax = "proto2";

package RTDBM;

import "common.proto";

// Коды используемых элементарных типов данных eXtremeDB
// Оригинал в файле xdb_common.hpp
enum DbType {
  DB_TYPE_UNDEF     = 0;
  DB_TYPE_LOGICAL   = 1;
  DB_TYPE_INT8      = 2;
  DB_TYPE_UINT8     = 3;
  DB_TYPE_INT16     = 4;
  DB_TYPE_UINT16    = 5;
  DB_TYPE_INT32     = 6;
  DB_TYPE_UINT32    = 7;
  DB_TYPE_INT64     = 8;
  DB_TYPE_UINT64    = 9;
  DB_TYPE_FLOAT     = 10;
  DB_TYPE_DOUBLE    = 11;
  DB_TYPE_BYTES     = 12; // переменная длина строки
  DB_TYPE_BYTES4    = 13;
  DB_TYPE_BYTES8    = 14;
  DB_TYPE_BYTES12   = 15;
  DB_TYPE_BYTES16   = 16;
  DB_TYPE_BYTES20   = 17;
  DB_TYPE_BYTES32   = 18;
  DB_TYPE_BYTES48   = 19;
  DB_TYPE_BYTES64   = 20;
  DB_TYPE_BYTES80   = 21;
  DB_TYPE_BYTES128  = 22;
  DB_TYPE_BYTES256  = 23;
  DB_TYPE_ABSTIME   = 24;
}

// Качество атрибута в БДРВ, оригинал находится в xdb_common.hpp
// NB: синхронизовать изменения с оригиналом
enum Quality {
  ATTR_OK        = 0; /* no known error on data */
  ATTR_SUSPECT   = 1; /* depends on a suspect, error or disabled value */
  ATTR_ERROR     = 2; /* calc. engine got math error */
  ATTR_DISABLED  = 3; /* calc. engine operation indicator disabled */
  ATTR_NOT_FOUND = 4; /* attribute is not found in database */
}

message ValueUpdate {
  required string   tag     = 1;
  required DbType   type    = 2 [default=DB_TYPE_UNDEF];
  required Quality  quality = 3 [default=ATTR_OK];
  optional int64    i64_value   = 4;
  optional int32    i32_value   = 5;
  optional float    f_value     = 6;
  optional double   g_value     = 7;
  optional string   s_value     = 8;
  optional bool     b_value     = 9;
}

// Чтение одного или более значения из БДРВ
message ReadMulti {
  repeated ValueUpdate  update_item = 1;
}

// Запись одного или более значений в БДРВ
message WriteMulti {
  repeated ValueUpdate  update_item = 1;
}

