/*
 * Создать структуры XDBService, XDBWorker, XDBLetter
 */

#define MAX_SERVICES_ENTRY  400
#define MAX_WORKERS_ENTRY   400
#define LETTERS4SERVICE_QUEUE_MAXLEN  100
#define uint4               unsigned<4>
#define uint1               unsigned<1>
#define uint8               unsigned<8>
#define service_name_t      char<32>
#define identity_t          char<11>
#define WORKERS_FOR_SERVICE 2


declare database xdb_broker;

struct timer_mark {
  uint4 sec;
  uint4 nsec;
};

struct XDBWorker
{
  /* Строковый идентификатор Обработчика */
  identity_t identity;
  /* Состояние */
  WorkerState state = DISARMED;
  /* Время ожидания получения подтверждения "Я ЖИВ" */
  timer_mark expiration;
  /* ссылка на объект XDBLetter */
  autoid_t   letter;
};

class XDBService
{
  /* Автоинкрементный числовой идентификатор */
  autoid[MAX_SERVICES_ENTRY];
  /* Имя Сервиса */
  service_name_t name;
  /* Текущее состояние */
  ServiceState state = UNKNOWN;

  /* Поиск Сервиса по имени */
  hash           <name> PK_name[MAX_SERVICES_ENTRY];
  /* Доступ ко всем зарегистрированным Сервисам */
  list;

  /*
   * обрабатываемые и ожидающие обработки сообщения находятся 
   * в XDBLetter по ссылке на XDBService.
   * Зарегистрированные Обработчики данного Сервиса находятся
   * в XDBWorker по ссылке на XDBService.
   */
  vector <XDBWorker> workers;
  tree   <workers.expiration.sec> SK_workers_expire;
  /* Поиск Обработчика по имени */
  unique tree <workers.identity> SK_ident;
};

enum ServiceState
{
  UNKNOWN, REGISTERED, DISABLED
};

enum WorkerState
{
  DISARMED, ARMED, INIT, SHUTDOWN, IN_PROCESS, EXPIRED
};

enum LetterState
{
   EMPTY, READY, DONE_OK, DONE_FAIL
};

/* Сообщение для Сервиса */
class XDBLetter
{
  autoid[LETTERS4SERVICE_QUEUE_MAXLEN];
  autoid_t   service;
  autoid_t   worker;
  LetterState state = EMPTY;
  /* Время ожидания получения подтверждения о выполнении */
  timer_mark  expiration;
  unique tree <expiration.sec, service> PK_expire_for_service;
  unique tree <worker, service> SK_wrk_srv;
};

