/*
 * Создать структуры XDBService, XDBWorker, XDBLetter
 */

#define MAX_SERVICES_ENTRY  400
#define MAX_WORKERS_ENTRY   400
/* в RTAP = 600 */
#define LETTERS4SERVICE_QUEUE_MAXLEN  100
#define uint4               unsigned<4>
#define uint8               unsigned<8>
#define service_name_t      char<32>
#define identity_t          char<11>


declare database xdb_broker;
/* Пользовательская ссылка, соответствует штатному autoid_t (uint8) */
struct point_oid
{
  uint8      id;
};

/*
 * NB: Для использования ref должен быть объявлен пользовательский oid,
 * поскольку фактически ссылка на другой объект имеет тип <dbname>_oid
 */
declare oid point_oid[1000];
declare auto_oid [1000]; /* 1000 уникальных объектов в базе */

/* Acquisition system */
class XDBService
{
  /* Автоинкрементный числовой идентификатор */
  autoid[MAX_SERVICES_ENTRY];
  /* Имя Сервиса */
  service_name_t name;
  /* обрабатываемые и ожидающие обработки сообщения */
  vector <ref>   letters;
  /* Поиск Сервиса по имени */
  hash           <name> pair[MAX_SERVICES_ENTRY];
  /* Спул зарегистрированных Обработчиков данного Сервиса */
  vector <ref>   waiting;
  /* Доступ ко всем зарегистрированным Сервисам */
  list;
};

class XDBWorker
{
  /* Автоинкрементный числовой идентификатор */
  autoid[MAX_WORKERS_ENTRY];
  /* Строковый идентификатор Обработчика */
  identity_t identity;
  /* Время ожидания получения подтверждения "Я ЖИВ" */
  time       expiration;
  /* Поиск Обработчика по имени */
  hash       <identity> PK_ident[MAX_WORKERS_ENTRY];
  /* Ссылка на свой экземпляр Сервиса */
  ref        service;
  /* Поиск экземпляра по идентификатору сервиса и identity */
  tree       <service, identity> PK_link;
  /*
   * Индекс по времени истечения периода "годности" информации 
   * о состоянии Обработчика
   */
  tree       <expiration> PK_expire;
};

enum LetterState
{
   EMPTY, READY, DONE_OK, DONE_FAIL
};

/* Сообщение для Сервиса */
class XDBLetter
{
  autoid[LETTERS4SERVICE_QUEUE_MAXLEN];
  ref   service;
  ref   worker;
  LetterState state = EMPTY;
  /* Время ожидания получения подтверждения о выполнении */
  time  expiration;
  tree  <expiration, service> PK_expire_for_service;
};

