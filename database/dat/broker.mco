/*
 * Создать структуры XDBService, XDBWorker, XDBLetter
 */

#define MAX_SERVICES_ENTRY  400
#define MAX_WORKERS_ENTRY   400
#define LETTERS4SERVICE_QUEUE_MAXLEN  100
#define uint4               unsigned<4>
#define uint1               unsigned<1>
#define uint8               unsigned<8>
#define service_name_t      char<32>
#define identity_t          char<11>
#define WORKERS_FOR_SERVICE 2


declare database xdb_broker;

struct timer_mark {
  uint4 sec;
  uint4 nsec;
};

/*
 * обрабатываемые и ожидающие обработки сообщения находятся 
 * в XDBLetter по ссылке на XDBService.
 */
class XDBWorker
{
  /* Автоинкрементный числовой идентификатор */
  autoid[MAX_WORKERS_ENTRY];
  /* Строковый идентификатор Обработчика */
  identity_t identity;
  /* Состояние */
  WorkerState state = ARMED;
  /* Время ожидания получения подтверждения "Я ЖИВ" */
  timer_mark expiration;
  /* ссылка на объект XDBLetter */
  autoid_t   service_ref;
  /* ссылка на объект XDBLetter */
  autoid_t   letter_ref;
  /* Поиск Обработчика по имени */
  unique tree  <identity> SK_by_ident;
  tree   <expiration.sec> SK_expiration;
  // У одной Службы может быть несколько Обработчиков
  tree      <service_ref> SK_by_serv_id;
};

/*
 * Зарегистрированные Обработчики данного Сервиса находятся
 * в XDBWorker по ссылке на XDBService.
 */
class XDBService
{
  /* Автоинкрементный числовой идентификатор */
  autoid[MAX_SERVICES_ENTRY];
  /* Имя Сервиса */
  service_name_t name;
  /* Текущее состояние */
  ServiceState state = UNKNOWN;
  /* Поиск Сервиса по имени */
  hash           <name> PK_name[MAX_SERVICES_ENTRY];
  /* Доступ ко всем зарегистрированным Сервисам */
  list;
  /*event <checkpoint>   newService;*/
  event <new>   newService;
  event <delete>       delService;
};

enum ServiceState
{
  UNKNOWN, REGISTERED, DISABLED
};

/*
Необходимо поддерживать аналогичный порядок и в заголовочном файле 
класса Worker - database/xdb_database_worker.hpp 
*/
enum WorkerState
{
  DISARMED, ARMED, INIT, SHUTDOWN, OCCUPIED, EXPIRED
};

enum LetterState
{
   EMPTY, UNASSIGNED, ASSIGNED, PROCESSING, DONE_OK, DONE_FAIL
};

/* Сообщение для Сервиса */
class XDBLetter
{
  autoid[LETTERS4SERVICE_QUEUE_MAXLEN];
  autoid_t   service_ref;
  autoid_t   worker_ref;
  LetterState state = EMPTY;
  /* Идентификатор Клиента, ожидающего ответа */
  identity_t reply_to;
  /* Время ожидания получения подтверждения о выполнении */
  timer_mark  expiration;
  /* У Сервиса может быть несколько Сообщений в списке на обработку */
  tree <expiration.sec, service_ref> PK_expire_for_service;
  /* Одновременно для каждого Обработчика допускается только одно Сообщение */
  unique tree <worker_ref, service_ref> SK_wrk_srv;
  tree <service_ref, state>  SK_by_state_for_serv;
  string header;
  string body;
};

